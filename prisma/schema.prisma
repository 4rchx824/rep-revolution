// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    refresh_token_expires_in Int?
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]

    exercises        Exercise[]
    workout_plans    WorkoutPlan[]
    workout_sessions WorkoutSession[]
    muscle_groups    MuscleGroup[]
}



model WorkoutPlanExercise {
    workout_plan_exercise_id String     @id @default(cuid())
    target_sets              Int
    target_reps              Int
    target_max_weight        Int
    weight_unit              WeightUnit
    order                    Int

    workout_plan WorkoutPlan @relation(fields: [workout_plan_id], references: [workout_plan_id])
    exercise     Exercise    @relation(fields: [exercise_id], references: [exercise_id])

    workout_plan_id String
    exercise_id     String
}

model WorkoutPlan {
    workout_plan_id String    @id @default(cuid())
    name            String
    description     String?
    day_of_week     DayOfWeek

    user                User                  @relation(fields: [user_id], references: [id])
    user_id             String
    WorkoutPlanExercise WorkoutPlanExercise[]
    WorkoutSession      WorkoutSession[]
}

model WorkoutSession {
    session_id String   @id @default(cuid())
    start_time DateTime
    end_time   DateTime
    duration   Int
    date       DateTime

    workout_plan    WorkoutPlan @relation(fields: [workout_plan_id], references: [workout_plan_id])
    user            User        @relation(fields: [user_id], references: [id])
    workout_plan_id String
    user_id         String

    WorkoutSessionExercise WorkoutSessionExercise[]
}

model WorkoutSessionExercise {
    workout_session_exercise_id String     @id @default(cuid())
    reps                        Int
    weight                      Int
    weight_unit                 WeightUnit

    workout_session WorkoutSession @relation(fields: [session_id], references: [session_id])
    exercise        Exercise       @relation(fields: [exercise_id], references: [exercise_id])
    session_id      String
    exercise_id     String
}

model Exercise {
    exercise_id String  @id @default(cuid())
    name        String
    description String?

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    WorkoutPlanExercise    WorkoutPlanExercise[]
    WorkoutSessionExercise WorkoutSessionExercise[]
    ExerciseMuscleGroup    ExerciseMuscleGroup[]
}

model ExerciseMuscleGroup {
    exercise_muscle_group_id String @id @default(cuid())

    exercise     Exercise    @relation(fields: [exercise_id], references: [exercise_id])
    muscle_group MuscleGroup @relation(fields: [muscle_group_id], references: [muscle_group_id])

    exercise_id     String
    muscle_group_id String
}

model MuscleGroup {
    muscle_group_id String @id @default(cuid())
    name            String

    user    User   @relation(fields: [user_id], references: [id])
    user_id String

    ExerciseMuscleGroup ExerciseMuscleGroup[]
}

enum DayOfWeek {
    MONDAY
    TUESDAY
    WEDNESDAY
    THURSDAY
    FRIDAY
    SATURDAY
    SUNDAY
}

enum WeightUnit {
    KG
    LB
}
